// Code generated by mockery v2.42.1. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockIRequester is an autogenerated mock type for the IRequester type
type MockIRequester struct {
	mock.Mock
}

type MockIRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRequester) EXPECT() *MockIRequester_Expecter {
	return &MockIRequester_Expecter{mock: &_m.Mock}
}

// GetIds provides a mock function with given fields:
func (_m *MockIRequester) GetIds() []int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIds")
	}

	var r0 []int
	if rf, ok := ret.Get(0).(func() []int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// MockIRequester_GetIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIds'
type MockIRequester_GetIds_Call struct {
	*mock.Call
}

// GetIds is a helper method to define mock.On call
func (_e *MockIRequester_Expecter) GetIds() *MockIRequester_GetIds_Call {
	return &MockIRequester_GetIds_Call{Call: _e.mock.On("GetIds")}
}

func (_c *MockIRequester_GetIds_Call) Run(run func()) *MockIRequester_GetIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRequester_GetIds_Call) Return(_a0 []int) *MockIRequester_GetIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRequester_GetIds_Call) RunAndReturn(run func() []int) *MockIRequester_GetIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetResponses provides a mock function with given fields:
func (_m *MockIRequester) GetResponses() []Response {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResponses")
	}

	var r0 []Response
	if rf, ok := ret.Get(0).(func() []Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Response)
		}
	}

	return r0
}

// MockIRequester_GetResponses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResponses'
type MockIRequester_GetResponses_Call struct {
	*mock.Call
}

// GetResponses is a helper method to define mock.On call
func (_e *MockIRequester_Expecter) GetResponses() *MockIRequester_GetResponses_Call {
	return &MockIRequester_GetResponses_Call{Call: _e.mock.On("GetResponses")}
}

func (_c *MockIRequester_GetResponses_Call) Run(run func()) *MockIRequester_GetResponses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRequester_GetResponses_Call) Return(_a0 []Response) *MockIRequester_GetResponses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRequester_GetResponses_Call) RunAndReturn(run func() []Response) *MockIRequester_GetResponses_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields: idx, id
func (_m *MockIRequester) Request(idx int, id int) {
	_m.Called(idx, id)
}

// MockIRequester_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockIRequester_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - idx int
//   - id int
func (_e *MockIRequester_Expecter) Request(idx interface{}, id interface{}) *MockIRequester_Request_Call {
	return &MockIRequester_Request_Call{Call: _e.mock.On("Request", idx, id)}
}

func (_c *MockIRequester_Request_Call) Run(run func(idx int, id int)) *MockIRequester_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockIRequester_Request_Call) Return() *MockIRequester_Request_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIRequester_Request_Call) RunAndReturn(run func(int, int)) *MockIRequester_Request_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRequester creates a new instance of MockIRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRequester {
	mock := &MockIRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
